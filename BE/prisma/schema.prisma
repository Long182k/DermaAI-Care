generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  userName            String         @unique
  firstName           String?
  lastName            String?
  email               String         @unique
  role                Role           @default(PATIENT)
  password            String
  dateOfBirth         DateTime?
  experience          Int?
  education           String?
  certifications      String?
  phoneNumber         String?
  gender              Gender?        @default(MALE)
  hashedPassword      String
  avatarUrl           String?
  hashedRefreshToken  String?
  createdAt           DateTime       @default(now())
  isActive            Boolean        @default(true)
  lastLoginAt         DateTime       @default(now())
  PatientAppointments Appointment[]  @relation("PatientAppointments")
  DoctorAppointments  Appointment[]  @relation("DoctorAppointments")
  Payments            Payment[]
  Notifications       Notification[]
  Predictions         Prediction[]
  Schedule            Schedule[]     @relation("DoctorSchedules")

  @@index([email])
  @@index([userName])
  @@index([role])
}

model Schedule {
  id        String         @id @default(uuid())
  doctorId  String
  startTime DateTime
  endTime   DateTime
  status    ScheduleStatus @default(AVAILABLE)
  createdAt DateTime       @default(now())

  Doctor      User         @relation("DoctorSchedules", fields: [doctorId], references: [id], onDelete: Cascade)
  Appointment Appointment?

  @@index([doctorId])
  @@index([startTime])
  @@index([endTime])
  @@index([status])
}

model Appointment {
  id         String            @id @default(uuid())
  patientId  String
  doctorId   String
  status     AppointmentStatus @default(PENDING)
  notes      String?
  createdAt  DateTime          @default(now())
  scheduleId String            @unique

  Patient      User           @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  Doctor       User           @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  Schedule     Schedule       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  Payments     Payment[]
  Notification Notification[]

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([createdAt])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  appointmentId String
  amount        Float
  currency      String
  status        String
  paymentMethod String
  transactionId String   @unique
  createdAt     DateTime @default(now())

  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Appointment  Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([userId])
  @@index([status])
  @@index([transactionId])
  @@index([createdAt])
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  method        String
  createdAt     DateTime @default(now())
  appointmentId String?
  paymentId     String?

  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  Payment     Payment?     @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([method])
  @@index([createdAt])
  @@index([appointmentId])
  @@index([paymentId])
}

model Prediction {
  id                String   @id @default(uuid())
  userId            String
  imageUrl          String
  status            String
  imageWithBoxesUrl String?
  result            Json
  createdAt         DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ScheduleStatus {
  AVAILABLE
  UNAVAILABLE
  BOOKED
  CANCELLED
}

enum AppointmentStatus {
  PENDING
  BOOKED
  CANCELLED
  CONFIRMED
}
