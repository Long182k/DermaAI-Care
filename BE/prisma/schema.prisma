generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                 @id @default(uuid())
  userName            String                 @unique
  email               String                 @unique
  role                Role                   @default(PATIENT)
  password            String
  dateOfBirth         DateTime?
  experience          Int?
  education           String?
  certifications      String?
  languages           Languages?             @default(English)
  hashedPassword      String
  avatarUrl           String?
  hashedRefreshToken  String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  isActive            Boolean                @default(true)
  lastLoginAt         DateTime               @default(now())
  PatientAppointments Appointment[]          @relation("PatientAppointments")
  DoctorAppointments  Appointment[]          @relation("DoctorAppointments")
  MedicalRecords      MedicalRecordHistory[]
  DoctorReviews       Review[]               @relation("DoctorReviews")
  PatientReviews      Review[]               @relation("PatientReviews")
  Payments            Payment[]
  Notifications       Notification[]
  AIDiagnosisJobs     AIDiagnosisJob[]
  MessageParticipants MessageParticipant[]
  Message             Message[]
  Schedule            Schedule[]             @relation("DoctorSchedules")

  @@index([email])
  @@index([userName])
  @@index([role])
}

model MessageRoom {
  id        String   @id @default(uuid())
  name      String
  roomType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Messages            Message[]
  MessageParticipants MessageParticipant[]

  @@index([roomType])
}

model Message {
  id        String   @id @default(uuid())
  roomId    String
  senderId  String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  Room   MessageRoom @relation(fields: [roomId], references: [id])
  Sender User        @relation(fields: [senderId], references: [id])

  @@index([roomId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isRead])
}

model MessageParticipant {
  id       String   @id @default(uuid())
  roomId   String
  userId   String
  joinedAt DateTime @default(now())

  Room MessageRoom @relation(fields: [roomId], references: [id])
  User User        @relation(fields: [userId], references: [id])

  @@index([roomId])
  @@index([userId])
}

model Schedule {
  id        String         @id @default(uuid())
  doctorId  String
  startTime String
  endTime   String
  status    ScheduleStatus @default(AVAILABLE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  Doctor      User         @relation("DoctorSchedules", fields: [doctorId], references: [id])
  Appointment Appointment?

  @@index([doctorId])
  @@index([startTime])
  @@index([endTime])
  @@index([status])
}

model Appointment {
  id         String   @id @default(uuid())
  patientId  String
  doctorId   String
  status     String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  scheduleId String   @unique

  Patient   User       @relation("PatientAppointments", fields: [patientId], references: [id])
  Doctor    User       @relation("DoctorAppointments", fields: [doctorId], references: [id])
  Reminders Reminder[]
  Schedule  Schedule   @relation(fields: [scheduleId], references: [id])

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
  @@index([createdAt])
}

model Reminder {
  id            String   @id @default(uuid())
  appointmentId String
  method        String
  createdAt     DateTime @default(now())

  Appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@index([appointmentId])
  @@index([method])
}

model MedicalRecordHistory {
  id        String   @id @default(uuid())
  userId    String
  diagnosis String
  aiReport  Json
  images    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Review {
  id        String   @id @default(uuid())
  doctorId  String
  patientId String
  rating    Int
  message   String
  createdAt DateTime @default(now())

  Doctor  User @relation("DoctorReviews", fields: [doctorId], references: [id])
  Patient User @relation("PatientReviews", fields: [patientId], references: [id])

  @@index([doctorId])
  @@index([patientId])
  @@index([rating])
  @@index([createdAt])
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  amount        Float
  currency      String
  status        String
  paymentMethod String
  transactionId String
  createdAt     DateTime @default(now())

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([transactionId])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model AIDiagnosisJob {
  id        String   @id @default(uuid())
  userId    String
  imageUrl  String
  status    String
  result    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model MedicalGuidance {
  id          String   @id @default(uuid())
  title       String
  description String
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([createdAt])
}

enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum ScheduleStatus {
  AVAILABLE
  UNAVAILABLE
  BOOKED
  CANCELLED
}

enum Languages {
  English
  Spanish
  French
  Japanese
  Vietnamese
}
